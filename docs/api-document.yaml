openapi: 3.0.2
info:
  title: ConnectHub API
  description: <b>ConnectHub API仕様</b><br>
  version: 1.0.0
servers:
  - url: http://localhost:8083/
tags:
  - name: setting
    description: 設定関連API
  - name: chat
    description: チャット関連API
  - name: user
    description: ユーザ関連API
  - name: membership
    description: メンバーシップ関連API
paths:
  /ws/:
    get:
      tags:
        - chat
      summary: WebSocket通信エンドポイント
      description: WebSocket接続を確立するためのエンドポイント
      security:
        - BearerAuth: []
      responses:
        101:
          description: WebSocketプロトコルを使用して接続が確立されました。
  /api/user/login:
    post:
      tags:
        - user
      summary: ユーザログインAPI
      description: |
        ユーザ情報を作成します。<br>
        ユーザの名前情報をリクエストで受け取り、ユーザIDと認証用のトークンを生成しデータベースへ保存します。<br>
        tokenは以降の他のAPIコール時にヘッダに設定をします。
      requestBody:
        description: Request Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        200:
          description: A successful response.
          headers:
            Authorization:
              description: Auth token for the registered user
              schema:
                type: string
  /api/user/create:
    post:
      tags:
        - user
      summary: ユーザサインアップAPI
      description: |
        新規ユーザを作成します。<br>
        ユーザの名前とパスワードをリクエストで受け取り、新しいユーザアカウントを作成します。
      requestBody:
        description: Request Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        200:
          description: A successful response.
          headers:
            Authorization:
              description: Auth token for the registered user
              schema:
                type: string
  /api/user/logout:
    post:
      tags:
        - user
      summary: ユーザログアウトAPI
      description: |
        ユーザをログアウトします。<br>
        クライアントからトークンを無効化します。
      security:
        - BearerAuth: []
      responses:
        200:
          description: ログアウトが正常に完了しました。
  /api/membership/get/{workspace_id}:
    get:
      tags:
        - membership
      summary: ワークスペースメンバシップ取得API
      description: |
        ワークスペースに所属するユーザを取得します。
      security:
        - BearerAuth: []
      parameters:
        - name: workspace_id
          in: path
          required: true
          schema:
            type: string
          description: ワークスペースID
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMembershipResponse'
  /api/membership/create/{workspace_id}:
    post:
      tags:
        - membership
      summary: メンバーシップ作成API
      description: |
        メンバーシップ情報を作成します。
      security:
        - BearerAuth: []
      parameters:
        - name: workspace_id
          in: path
          required: true
          schema:
            type: string
          description: ワークスペースID
      requestBody:
        description: Request Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMembershipRequest'
        required: true
      responses:
        200:
          description: A successful response.
  /api/membership/update/{workspace_id}:
    put:
      tags:
        - membership
      summary: メンバーシップ更新API
      description: |
        メンバーシップ情報を更新します。
      security:
        - BearerAuth: []
      parameters:
        - name: workspace_id
          in: path
          required: true
          schema:
            type: string
          description: ワークスペースID
      requestBody:
        description: Request Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMembershipRequest'
        required: true
      responses:
        200:
          description: A successful response.
  /api/membership/list/{workspace_id}:
    get:
      tags:
        - membership
      summary: ワークスペースのメンバーシップ一覧取得API
      description: |
        ワークスペースに所属するメンバーシップの一覧を取得します。
      security:
        - BearerAuth: []
      parameters:
        - name: workspace_id
          in: path
          required: true
          description: ID of the workspace
          schema:
            type: string
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMembershipsResponse'
  /api/membership/list-channel/{channel_id}:
    get:
      tags:
        - membership
      summary: ルームに参加しているメンバーシップの取得API
      description: |
        ルームに参加しているメンバーシップを取得します。<br>
        ルームIDをリクエストで受け取り、ルームに参加しているメンバーシップ情報を返します。
      security:
        - BearerAuth: []
      parameters:
        - name: channel_id
          in: path
          required: true
          description: ID of the channel
          schema:
            type: string
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListChannelMembershipsResponse'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    CreateUserRequest:
      type: object
      properties:
        email:
          type: string
          description: ユーザのメールアドレス
        password:
          type: string
          description: ユーザのパスワード
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          description: ユーザのメールアドレス
        password:
          type: string
          description: ユーザのパスワード
    GetMembershipResponse:
      type: object
      properties:
        name:
          type: string
          description: メンバーシップの名前
        email:
          type: string
          description: ユーザのメールアドレス
        profile_image_url:
          type: string
          description: メンバーシップのプロフィール画像
        channels:
          type: array
          description: 参加しているルームの一覧
          items:
            type: object
            properties:
              channelID:
                type: string
                description: ルームID
              channelName:
                type: string
                description: ルームの名前
              private:
                type: boolean
                description: プライベートルームかどうか
    CreateMembershipRequest:
      type: object
      properties:
        name:
          type: string
          description: ユーザの名前
        profile_image_url:
          type: string
          description: ユーザのプロフィール画像
        is_admin:
          type: boolean
          description: 管理者権限を持つかどうか
    UpdateMembershipRequest:
      type: object
      properties:
        userID:
          type: string
          description: ユーザID
        name:
          type: string
          description: ユーザの名前
        profile_image_url:
          type: string
          description: ユーザのプロフィール画像
    ListMembershipsResponse:
      type: object
      properties:
        memberships:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: "12345"
              name:
                type: string
                example: "John Doe"
              email:
                type: string
                example: "john.doe@example.com"
              profile_image_url:
                type: string
                example: "https://example.com/profile.jpg"
              is_admin:
                type: boolean
                example: false
              is_deleted:
                type: boolean
                example: false
    ListChannelMembershipsResponse:
      type: object
      properties:
        memberships:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: "12345"
              name:
                type: string
                example: "John Doe"
              email:
                type: string
                example: "john.doe@example.com"
              profile_image_url:
                type: string
                example: "https://example.com/profile.jpg"
              is_admin:
                type: boolean
                example: false
              is_deleted:
                type: boolean
                example: false