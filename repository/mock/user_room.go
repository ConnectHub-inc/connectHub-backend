// Code generated by MockGen. DO NOT EDIT.
// Source: user_room.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "github.com/tusmasoma/connectHub-backend/entity"
	repository "github.com/tusmasoma/connectHub-backend/repository"
)

// MockUserRoomRepository is a mock of UserRoomRepository interface.
type MockUserRoomRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRoomRepositoryMockRecorder
}

// MockUserRoomRepositoryMockRecorder is the mock recorder for MockUserRoomRepository.
type MockUserRoomRepositoryMockRecorder struct {
	mock *MockUserRoomRepository
}

// NewMockUserRoomRepository creates a new mock instance.
func NewMockUserRoomRepository(ctrl *gomock.Controller) *MockUserRoomRepository {
	mock := &MockUserRoomRepository{ctrl: ctrl}
	mock.recorder = &MockUserRoomRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRoomRepository) EXPECT() *MockUserRoomRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRoomRepository) Create(ctx context.Context, userRoom entity.UserRoom) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userRoom)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRoomRepositoryMockRecorder) Create(ctx, userRoom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRoomRepository)(nil).Create), ctx, userRoom)
}

// Delete mocks base method.
func (m *MockUserRoomRepository) Delete(ctx context.Context, userID, roomID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID, roomID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRoomRepositoryMockRecorder) Delete(ctx, userID, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRoomRepository)(nil).Delete), ctx, userID, roomID)
}

// Get mocks base method.
func (m *MockUserRoomRepository) Get(ctx context.Context, userID, roomID string) (*entity.UserRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID, roomID)
	ret0, _ := ret[0].(*entity.UserRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRoomRepositoryMockRecorder) Get(ctx, userID, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRoomRepository)(nil).Get), ctx, userID, roomID)
}

// List mocks base method.
func (m *MockUserRoomRepository) List(ctx context.Context, qcs []repository.QueryCondition) ([]entity.UserRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, qcs)
	ret0, _ := ret[0].([]entity.UserRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserRoomRepositoryMockRecorder) List(ctx, qcs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserRoomRepository)(nil).List), ctx, qcs)
}

// Update mocks base method.
func (m *MockUserRoomRepository) Update(ctx context.Context, id string, userRoom entity.UserRoom) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, userRoom)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRoomRepositoryMockRecorder) Update(ctx, id, userRoom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRoomRepository)(nil).Update), ctx, id, userRoom)
}
