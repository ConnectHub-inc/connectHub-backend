// Code generated by MockGen. DO NOT EDIT.
// Source: pubsub.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	redis "github.com/go-redis/redis/v8"
	gomock "github.com/golang/mock/gomock"
)

// MockPubSubRepository is a mock of PubSubRepository interface.
type MockPubSubRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubRepositoryMockRecorder
}

// MockPubSubRepositoryMockRecorder is the mock recorder for MockPubSubRepository.
type MockPubSubRepositoryMockRecorder struct {
	mock *MockPubSubRepository
}

// NewMockPubSubRepository creates a new mock instance.
func NewMockPubSubRepository(ctrl *gomock.Controller) *MockPubSubRepository {
	mock := &MockPubSubRepository{ctrl: ctrl}
	mock.recorder = &MockPubSubRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubSubRepository) EXPECT() *MockPubSubRepositoryMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockPubSubRepository) Publish(ctx context.Context, channel string, message any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, channel, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockPubSubRepositoryMockRecorder) Publish(ctx, channel, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPubSubRepository)(nil).Publish), ctx, channel, message)
}

// Subscribe mocks base method.
func (m *MockPubSubRepository) Subscribe(ctx context.Context, channel string) *redis.PubSub {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, channel)
	ret0, _ := ret[0].(*redis.PubSub)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPubSubRepositoryMockRecorder) Subscribe(ctx, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPubSubRepository)(nil).Subscribe), ctx, channel)
}
