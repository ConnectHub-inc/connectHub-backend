// Code generated by MockGen. DO NOT EDIT.
// Source: membership_channel.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMembershipChannelUseCase is a mock of MembershipChannelUseCase interface.
type MockMembershipChannelUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockMembershipChannelUseCaseMockRecorder
}

// MockMembershipChannelUseCaseMockRecorder is the mock recorder for MockMembershipChannelUseCase.
type MockMembershipChannelUseCaseMockRecorder struct {
	mock *MockMembershipChannelUseCase
}

// NewMockMembershipChannelUseCase creates a new mock instance.
func NewMockMembershipChannelUseCase(ctrl *gomock.Controller) *MockMembershipChannelUseCase {
	mock := &MockMembershipChannelUseCase{ctrl: ctrl}
	mock.recorder = &MockMembershipChannelUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMembershipChannelUseCase) EXPECT() *MockMembershipChannelUseCaseMockRecorder {
	return m.recorder
}

// CreateMembershipChannel mocks base method.
func (m *MockMembershipChannelUseCase) CreateMembershipChannel(ctx context.Context, membershipID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMembershipChannel", ctx, membershipID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMembershipChannel indicates an expected call of CreateMembershipChannel.
func (mr *MockMembershipChannelUseCaseMockRecorder) CreateMembershipChannel(ctx, membershipID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMembershipChannel", reflect.TypeOf((*MockMembershipChannelUseCase)(nil).CreateMembershipChannel), ctx, membershipID, channelID)
}

// DeleteMembershipChannel mocks base method.
func (m *MockMembershipChannelUseCase) DeleteMembershipChannel(ctx context.Context, membershipID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMembershipChannel", ctx, membershipID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMembershipChannel indicates an expected call of DeleteMembershipChannel.
func (mr *MockMembershipChannelUseCaseMockRecorder) DeleteMembershipChannel(ctx, membershipID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembershipChannel", reflect.TypeOf((*MockMembershipChannelUseCase)(nil).DeleteMembershipChannel), ctx, membershipID, channelID)
}
