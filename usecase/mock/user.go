// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "github.com/tusmasoma/connectHub-backend/entity"
	usecase "github.com/tusmasoma/connectHub-backend/usecase"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// CreateUserAndGenerateToken mocks base method.
func (m *MockUserUseCase) CreateUserAndGenerateToken(ctx context.Context, email, passward string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAndGenerateToken", ctx, email, passward)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserAndGenerateToken indicates an expected call of CreateUserAndGenerateToken.
func (mr *MockUserUseCaseMockRecorder) CreateUserAndGenerateToken(ctx, email, passward interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAndGenerateToken", reflect.TypeOf((*MockUserUseCase)(nil).CreateUserAndGenerateToken), ctx, email, passward)
}

// ListWorkspaceUsers mocks base method.
func (m *MockUserUseCase) ListWorkspaceUsers(ctx context.Context, workspaceID string) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaceUsers", ctx, workspaceID)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaceUsers indicates an expected call of ListWorkspaceUsers.
func (mr *MockUserUseCaseMockRecorder) ListWorkspaceUsers(ctx, workspaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceUsers", reflect.TypeOf((*MockUserUseCase)(nil).ListWorkspaceUsers), ctx, workspaceID)
}

// LoginAndGenerateToken mocks base method.
func (m *MockUserUseCase) LoginAndGenerateToken(ctx context.Context, email, passward string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginAndGenerateToken", ctx, email, passward)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginAndGenerateToken indicates an expected call of LoginAndGenerateToken.
func (mr *MockUserUseCaseMockRecorder) LoginAndGenerateToken(ctx, email, passward interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginAndGenerateToken", reflect.TypeOf((*MockUserUseCase)(nil).LoginAndGenerateToken), ctx, email, passward)
}

// LogoutUser mocks base method.
func (m *MockUserUseCase) LogoutUser(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutUser indicates an expected call of LogoutUser.
func (mr *MockUserUseCaseMockRecorder) LogoutUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutUser", reflect.TypeOf((*MockUserUseCase)(nil).LogoutUser), ctx, userID)
}

// UpdateUser mocks base method.
func (m *MockUserUseCase) UpdateUser(ctx context.Context, params *usecase.UpdateUserParams, user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, params, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserUseCaseMockRecorder) UpdateUser(ctx, params, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserUseCase)(nil).UpdateUser), ctx, params, user)
}
