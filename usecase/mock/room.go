// Code generated by MockGen. DO NOT EDIT.
// Source: room.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "github.com/tusmasoma/connectHub-backend/entity"
)

// MockRoomUseCase is a mock of RoomUseCase interface.
type MockRoomUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockRoomUseCaseMockRecorder
}

// MockRoomUseCaseMockRecorder is the mock recorder for MockRoomUseCase.
type MockRoomUseCaseMockRecorder struct {
	mock *MockRoomUseCase
}

// NewMockRoomUseCase creates a new mock instance.
func NewMockRoomUseCase(ctrl *gomock.Controller) *MockRoomUseCase {
	mock := &MockRoomUseCase{ctrl: ctrl}
	mock.recorder = &MockRoomUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomUseCase) EXPECT() *MockRoomUseCaseMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method.
func (m *MockRoomUseCase) CreateRoom(ctx context.Context, userID, workspaceID string, room entity.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx, userID, workspaceID, room)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockRoomUseCaseMockRecorder) CreateRoom(ctx, userID, workspaceID, room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockRoomUseCase)(nil).CreateRoom), ctx, userID, workspaceID, room)
}

// ListUserWorkspaceRooms mocks base method.
func (m *MockRoomUseCase) ListUserWorkspaceRooms(ctx context.Context, userID, workspaceID string) ([]entity.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserWorkspaceRooms", ctx, userID, workspaceID)
	ret0, _ := ret[0].([]entity.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserWorkspaceRooms indicates an expected call of ListUserWorkspaceRooms.
func (mr *MockRoomUseCaseMockRecorder) ListUserWorkspaceRooms(ctx, userID, workspaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserWorkspaceRooms", reflect.TypeOf((*MockRoomUseCase)(nil).ListUserWorkspaceRooms), ctx, userID, workspaceID)
}
