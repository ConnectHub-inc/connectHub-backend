// Code generated by MockGen. DO NOT EDIT.
// Source: user_workspace.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "github.com/tusmasoma/connectHub-backend/entity"
	usecase "github.com/tusmasoma/connectHub-backend/usecase"
)

// MockUserWorkspaceUseCase is a mock of UserWorkspaceUseCase interface.
type MockUserWorkspaceUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserWorkspaceUseCaseMockRecorder
}

// MockUserWorkspaceUseCaseMockRecorder is the mock recorder for MockUserWorkspaceUseCase.
type MockUserWorkspaceUseCaseMockRecorder struct {
	mock *MockUserWorkspaceUseCase
}

// NewMockUserWorkspaceUseCase creates a new mock instance.
func NewMockUserWorkspaceUseCase(ctrl *gomock.Controller) *MockUserWorkspaceUseCase {
	mock := &MockUserWorkspaceUseCase{ctrl: ctrl}
	mock.recorder = &MockUserWorkspaceUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserWorkspaceUseCase) EXPECT() *MockUserWorkspaceUseCaseMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockUserWorkspaceUseCase) GetUser(ctx context.Context, userID, workspaceID string) (*entity.UserWorkspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID, workspaceID)
	ret0, _ := ret[0].(*entity.UserWorkspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserWorkspaceUseCaseMockRecorder) GetUser(ctx, userID, workspaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserWorkspaceUseCase)(nil).GetUser), ctx, userID, workspaceID)
}

// ListUsers mocks base method.
func (m *MockUserWorkspaceUseCase) ListUsers(ctx context.Context, workspaceID string) ([]entity.UserWorkspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, workspaceID)
	ret0, _ := ret[0].([]entity.UserWorkspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockUserWorkspaceUseCaseMockRecorder) ListUsers(ctx, workspaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUserWorkspaceUseCase)(nil).ListUsers), ctx, workspaceID)
}

// UpdateUser mocks base method.
func (m *MockUserWorkspaceUseCase) UpdateUser(ctx context.Context, params *usecase.UpdateUserParams, user entity.UserWorkspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, params, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserWorkspaceUseCaseMockRecorder) UpdateUser(ctx, params, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserWorkspaceUseCase)(nil).UpdateUser), ctx, params, user)
}
