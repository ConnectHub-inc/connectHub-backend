// Code generated by MockGen. DO NOT EDIT.
// Source: workspace.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWorkspaceUseCase is a mock of WorkspaceUseCase interface.
type MockWorkspaceUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceUseCaseMockRecorder
}

// MockWorkspaceUseCaseMockRecorder is the mock recorder for MockWorkspaceUseCase.
type MockWorkspaceUseCaseMockRecorder struct {
	mock *MockWorkspaceUseCase
}

// NewMockWorkspaceUseCase creates a new mock instance.
func NewMockWorkspaceUseCase(ctrl *gomock.Controller) *MockWorkspaceUseCase {
	mock := &MockWorkspaceUseCase{ctrl: ctrl}
	mock.recorder = &MockWorkspaceUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceUseCase) EXPECT() *MockWorkspaceUseCaseMockRecorder {
	return m.recorder
}

// CreateWorkspace mocks base method.
func (m *MockWorkspaceUseCase) CreateWorkspace(ctx context.Context, id, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspace", ctx, id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorkspace indicates an expected call of CreateWorkspace.
func (mr *MockWorkspaceUseCaseMockRecorder) CreateWorkspace(ctx, id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspace", reflect.TypeOf((*MockWorkspaceUseCase)(nil).CreateWorkspace), ctx, id, name)
}
